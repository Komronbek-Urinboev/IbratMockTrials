from telebot import TeleBot, types
from ibrat_mock_bot.handlers.events import *
from ibrat_mock_bot.database import save_db, user_data, users_db, DB_FILE
from ibrat_mock_bot.feature.bot_instance import bot
from ibrat_mock_bot.config import ADMIN_IDS
import json

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
LANGUAGES = {
    "en": "English",
    "ru": "–†—É—Å—Å–∫–∏–π",
    "uz": "O'zbek tili"
}

MESSAGES = {
    "choose_lang": "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ Ibrat Mock Trials.\nüåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language / Tilni tanlang:",
    "ask_name": {
        "en": "Enter your full name (Name Surname):",
        "ru": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        "uz": "Ismingiz va familiyangizni kiriting:"
    },
    "ask_phone": {
        "en": "üìû Share your phone number:",
        "ru": "üìû –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "uz": "üìû Telefon raqamingizni ulashing:"
    },
    "ask_english": {
        "en": "Select your English level:",
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:",
        "uz": "Ingliz til darajangizni tanlang:"
    },
    "ask_age": {
        "en": "Enter your age:",
        "ru": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
        "uz": "Yoshingizni kiriting:"
    },
    "success": {
        "en": "Congratulations! You have successfully registered for Ibrat Mock Trials! üéâ\nTo sign up for the Mock Trials, enter the command /events",
        "ru": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ Ibrat Mock Trials! üéâ\n–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ Mock Trials –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /events",
        "uz": "Tabriklaymiz! Siz Ibrat Mock Trials ga muvaffaqiyatli ro'yxatdan o'tdingiz! üéâ\nMock Trials yozilish uchun /events buyrug'ini kiriting"
    }
}


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def notify_admins_about_registration(user_info):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    message = (
        "üéâ <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è:</b>\n"
        f"üë§ <b>–ò–º—è –§–∞–º–∏–ª–∏—è:</b> <code>{user_info['full_name']}</code>\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +{user_info['phone']}\n"
        f"üá¨üáß <b>–£—Ä–æ–≤–µ–Ω—å:</b> <code>{user_info['english_level']}</code>\n"
        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> <code>{user_info['age']}</code>\n"
        f"üÜî <b>Telegram ID:</b> <code>{user_info['telegram_id']}</code>\n"
        f"üìå <b>Username:</b> @{user_info['username'] if user_info['username'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )

    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, message, parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_inline_markup(options):
    markup = types.InlineKeyboardMarkup()
    for key, value in options.items():
        markup.add(types.InlineKeyboardButton(value, callback_data=key))
    return markup


@bot.message_handler(commands=['language'])
def change_language(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("English", callback_data="lang_en"))
    markup.add(types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"))
    markup.add(types.InlineKeyboardButton("O'zbek tili", callback_data="lang_uz"))

    bot.send_message(
        message.chat.id,
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language / Tilni tanlang:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def set_language(call):
    try:
        chosen_lang = call.data.split("_")[1]
        telegram_id = str(call.message.chat.id)

        if telegram_id not in users_db:
            users_db[telegram_id] = {}

        users_db[telegram_id]["lang"] = chosen_lang

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with open(DB_FILE, "w", encoding="utf-8") as f:
            json.dump(users_db, f, indent=4, ensure_ascii=False)

        # –¢–µ–∫—Å—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_text = {
            "en": "‚úÖ Language has been changed to English!\nTo return the button, use the command - /events",
            "ru": "‚úÖ –Ø–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π!\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É - /events",
            "uz": "‚úÖ Til o'zbek tiliga o'zgartirildi!\nTugmani qaytarish uchun - /events buyrug'idan foydalaning"
        }

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–º–æ—â—å—é ReplyKeyboardRemove
        bot.send_message(
            call.message.chat.id,
            confirmation_text[chosen_lang],
            reply_markup=ReplyKeyboardRemove()  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )

        bot.answer_callback_query(call.id)

    except Exception as e:
        print(f"[ERROR] - –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    if user_id in users_db:
        lang = users_db[user_id].get("lang", "uz")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é uz
        already_registered_msg = {
            "en": "You are already registered! ‚úÖ",
            "ru": "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ",
            "uz": "Siz allaqachon ro'yxatdan o'tgansiz! ‚úÖ"
        }
        bot.send_message(message.chat.id, already_registered_msg[lang])
        return

    bot.send_message(message.chat.id, MESSAGES["choose_lang"], reply_markup=get_inline_markup(LANGUAGES))
    user_data[message.chat.id] = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data in LANGUAGES)
def choose_language(call):
    lang = call.data
    user_data[call.message.chat.id]["lang"] = lang
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, MESSAGES["ask_name"][lang])
    bot.register_next_step_handler(call.message, get_name)


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def get_name(message):
    lang = user_data[message.chat.id]["lang"]
    if len(message.text.split()) < 1:
        bot.send_message(message.chat.id, MESSAGES["ask_name"][lang])
        bot.register_next_step_handler(message, get_name)
        return
    user_data[message.chat.id]["full_name"] = message.text
    bot.send_message(message.chat.id, MESSAGES["ask_phone"][lang],
                     reply_markup=types.ReplyKeyboardMarkup(one_time_keyboard=True).add(
                         types.KeyboardButton("üì≤ Share phone number", request_contact=True)))
    bot.register_next_step_handler(message, get_phone)


def get_phone(message):
    lang = user_data[message.chat.id]["lang"]
    if not message.contact:
        bot.send_message(message.chat.id, MESSAGES["ask_phone"][lang])
        bot.register_next_step_handler(message, get_phone)
        return
    user_data[message.chat.id]["phone"] = message.contact.phone_number
    remove_keyboard = types.ReplyKeyboardRemove()
    english_levels = {lvl: lvl for lvl in
                      ["Beginner", "Elementary", "Pre-Intermediate", "Intermediate", "Upper-Intermediate", "Advanced"]}
    bot.send_message(message.chat.id, MESSAGES["ask_english"][lang], reply_markup=get_inline_markup(english_levels))
    bot.send_message(message.chat.id, "üôÉ", reply_markup=remove_keyboard)


@bot.callback_query_handler(
    func=lambda call: call.data in ["Beginner", "Elementary", "Pre-Intermediate", "Intermediate", "Upper-Intermediate",
                                    "Advanced"])
def get_english_level(call):
    lang = user_data[call.message.chat.id]["lang"]
    user_data[call.message.chat.id]["english_level"] = call.data
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, MESSAGES["ask_age"][lang])
    bot.register_next_step_handler(call.message, get_age)


def get_age(message):
    lang = user_data[message.chat.id]["lang"]
    if not message.text.isdigit() or int(message.text) < 2:
        bot.send_message(message.chat.id, MESSAGES["ask_age"][lang])
        bot.register_next_step_handler(message, get_age)
        return
    user_data[message.chat.id]["age"] = int(message.text)
    user_data[message.chat.id]["telegram_id"] = message.chat.id
    user_data[message.chat.id]["username"] = message.from_user.username
    user_data[message.chat.id]["first_name"] = message.from_user.first_name
    users_db[str(message.chat.id)] = user_data[message.chat.id]
    save_db()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    notify_admins_about_registration(users_db[str(message.chat.id)])

    bot.send_message(message.chat.id, MESSAGES["success"][lang])

print("Register module loaded successfully.")